/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useRef } from "react";
import { useGLTF,useFBX, useAnimations,Clone,Html } from "@react-three/drei";
import * as THREE from 'three'


export default function Robot(props) {
  

 
 
 
const model= useGLTF("./models/Robot.glb")



const group1 = useRef();
  const group2 = useRef();
  const group3 = useRef();
  const group4 = useRef();
  const group5 = useRef();
  const group6 = useRef();
  const group7 = useRef();
  const group8 = useRef();
 
 

const { actions: actions1 } = useAnimations(model.animations, group1);
const { actions: actions2 } = useAnimations(model.animations, group2);
const { actions: actions3 } = useAnimations(model.animations, group3);
const { actions: actions4 } = useAnimations(model.animations, group4);
const { actions: actions5 } = useAnimations(model.animations, group5);
const { actions: actions6 } = useAnimations(model.animations, group6);
const { actions: actions7 } = useAnimations(model.animations, group7);
const { actions: actions8 } = useAnimations(model.animations, group8);




useEffect(() => {
  // Gérer l'animation pour le premier clone
  actions1["iddle1"].reset().fadeIn(0.5).play();
  return () => actions1["iddle1"].fadeOut(0.5);
}, []);

//lv2

useEffect(() => {
  // Gérer l'animation pour le deuxième clone
  actions2["iddle1"].reset().fadeIn(0.5).play();
  return () => actions2["iddle1"].fadeOut(0.5);
}, []);

useEffect(() => {
  // Gérer l'animation pour le troisième clone
  actions3["iddle2"].reset().fadeIn(0.5).play();
  return () => actions3["iddle2"].fadeOut(0.5);
}, []);

//lv3

useEffect(() => {
  // Gérer l'animation pour le deuxième clone
  actions4["iddle1"].reset().fadeIn(0.5).play();
  return () => actions4["iddle1"].fadeOut(0.5);
}, []);

useEffect(() => {
  // Gérer l'animation pour le troisième clone
  actions5["iddle2"].reset().fadeIn(0.5).play();
  return () => actions5["iddle2"].fadeOut(0.5);
}, []);


//lv4


useEffect(() => {
  // Gérer l'animation pour le deuxième clone
  actions6["iddle1"].reset().fadeIn(0.5).play();
  return () => actions6["iddle1"].fadeOut(0.5);
}, []);

useEffect(() => {
  // Gérer l'animation pour le troisième clone
  actions7["iddle2"].reset().fadeIn(0.5).play();
  return () => actions7["iddle2"].fadeOut(0.5);
}, []);










  return (<>
  
  <Clone ref={group1} object={model.scene} scale={0.25}  position={[-2, 0, -2.6]} >

  <mesh position={[-1, 4, -2]} scale={0}>
<boxGeometry args={[1, 1]} />
<Html wrapperClass='label1' position={[0,2,0]}>Bonjour et bienvenue !</Html>
</mesh> 



  </Clone>


//lv2
  <Clone ref={group2} object={model.scene} scale={0.25}  position={[-8, 0.15, -2.6]} ></Clone>


  <Clone ref={group3} object={model.scene} scale={0.25}  position={[-11, 0.15, -2.6]} ></Clone>


 //lv3
  <Clone ref={group4} object={model.scene} scale={0.25}  position={[-19, 0.15, -4]} rotation-y={Math.PI/5} ></Clone>
  <Clone ref={group5} object={model.scene} scale={0.25}  position={[-21.8, 0.15, -4]} rotation-y={Math.PI/5} ></Clone> 

  //lv4
  <Clone ref={group6} object={model.scene} scale={0.25}  position={[-32, 0.4, -4]} rotation-y={Math.PI/5} ></Clone>
  <Clone ref={group7} object={model.scene} scale={0.25}  position={[-27, 0.4, -5]} ></Clone> 
  
  </>
   
  );
}

useGLTF.preload("/Robot.glb");





// const Roboto = ({

//   color
 
// }) => {
 

//   return (
//     <group ref={group} {...props} dispose={null}>
//       <group name="Scene" >
//         <mesh
//           name="base"
//           castShadow
//           receiveShadow
//           geometry={nodes.base.geometry}
//           material={materials["tex color"]}
//           position={[-0.118, 0.966, 0.004]}
//         />
//         <mesh
//           name="head"
//           castShadow
//           receiveShadow
//           geometry={nodes.head.geometry}
//           material={materials["tex color"]}
//           position={[-0.14, 2.069, 0.009]}
//           rotation={[0, 0.018, 0]}
//         >
//           <mesh
//             name="antenne"
//             castShadow
//             receiveShadow
//             geometry={nodes.antenne.geometry}
//             material={materials["tex color"]}
//             position={[0.345, 0.731, -0.136]}
//           />
//           <mesh
//             name="couronne"
//             castShadow
//             receiveShadow
//             geometry={nodes.couronne.geometry}
           
//           >
//             <meshStandardMaterial color="red"/>


//           </mesh>
//           <mesh
//             name="Cube062"
//             castShadow
//             receiveShadow
//             geometry={nodes.Cube062.geometry}
//             material={materials["tex color"]}
//             position={[0.349, 0.626, -0.133]}
//             rotation={[0, -0.018, 0]}
//           />
//           <mesh
//             name="deco_oeil_G"
//             castShadow
//             receiveShadow
//             geometry={nodes.deco_oeil_G.geometry}
//             material={materials["tex color"]}
//             position={[-0.098, -0.172, 0.765]}
//             rotation={[0.144, -0.028, 0.004]}
//           />
//           <mesh
//             name="deco_oeil_gauche"
//             castShadow
//             receiveShadow
//             geometry={nodes.deco_oeil_gauche.geometry}
//             material={materials["tex color"]}
//             position={[0.318, -0.346, 0.752]}
//             rotation={[0.144, -0.028, 0.004]}
//           />
//           <mesh
//             name="lentille_droite"
//             castShadow
//             receiveShadow
//             geometry={nodes.lentille_droite.geometry}
//             material={materials["tex color"]}
//             position={[0.318, -0.346, 0.752]}
//             rotation={[0.144, -0.028, 0.004]}
//           />
//           <mesh
//             name="lentille_gauche"
//             castShadow
//             receiveShadow
//             geometry={nodes.lentille_gauche.geometry}
//             material={materials["tex color"]}
//             position={[-0.098, -0.172, 0.765]}
//             rotation={[0.144, -0.028, 0.004]}
//           />
//           <mesh
//             name="tube_oeil_D"
//             castShadow
//             receiveShadow
//             geometry={nodes.tube_oeil_D.geometry}
//             material={materials["tex color"]}
//             position={[0.318, -0.346, 0.752]}
//             rotation={[0.144, -0.028, 0.004]}
//           />
//           <mesh
//             name="tube_oeil_G"
//             castShadow
//             receiveShadow
//             geometry={nodes.tube_oeil_G.geometry}
//             material={materials["tex color"]}
//             position={[-0.098, -0.172, 0.765]}
//             rotation={[0.144, -0.028, 0.004]}
//           />
//         </mesh>
//       </group>
//     </group>
    
//   );
// };




